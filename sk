#!/usr/bin/env bash

source sk.config
PATH="$PREFIX/bin:$PATH"

@() {
    printf "[ ] $1"
    shift
    if $@ >&2 2>sk.log; then
        printf "\r[\033[32;1mv\033[m]\n"
    else
        printf "\r[\033[31;1mx\033[m]\n"
        exit 1
    fi
}

__config() {
    @ "Wiping $PREFIX" rm -rf "$PREFIX"
    @ "Setting up build directory ($PREFIX/build)" mkdir -p "$PREFIX/build"
        cd "$PREFIX/build"
    @ "Fetching binutils" \
        curl -L "https://ftp.gnu.org/gnu/binutils/binutils-$V_BINUTILS.tar.gz" \
        -o binutils.tar.gz
    @ "Extracting binutils" tar xf binutils.tar.gz
    @ "Setting up binutils build environment" mkdir -p "build-binutils"
        cd "build-binutils"
    @ "Configuring binutils " \
        ../binutils-$V_BINUTILS/configure --target=$TARGET \
        --prefix="$PREFIX" --with-sysroot --disable-nls --disable-werror
    @ "Building binutils" make
    @ "Installing binutils to $PREFIX" make install
        cd ..

    @ "Confirming install" which -- $TARGET-as

    @ "Fetching gcc" \
        curl -L "https://ftp.gnu.org/gnu/gcc/gcc-$V_GCC/gcc-$V_GCC.tar.gz" \
        -o gcc.tar.gz
    @ "Extracting gcc" tar xf gcc.tar.gz
    @ "Setting up gcc build environment" mkdir build-gcc
        cd build-gcc
    @ "Configuring gcc" \
        ../gcc-$V_GCC/configure --target=$TARGET --prefix="$PREFIX" \
        --disable-nls --enable-languages=c --without-headers
    @ "Building gcc" make all-gcc
    @ "Building libgcc" make all-target-libgcc
    @ "Installing gcc" make install-gcc
    @ "Installing libgcc" make install-target-libgcc
}

__clean() {
    @ "Removing $PREFIX" rm -rf $PREFIX
}

__$1
