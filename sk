#!/bin/sh

. config.sh
ROOT="$PWD"
LOGDIR="$ROOT/logs"
LOG="$LOGDIR/sk.$$.log"
PATH="$CC_PREFIX/bin:$PATH"

cleanup() {
	printf "\033[?25h"
}
trap cleanup EXIT INT

event() {
	printf "\033[?25l   $1\r"
	shift
	printf ">>> $*" >$LOG
	( "$@" &>$LOG ) &
	spid=$!
	i=0
	while [ -d /proc/$spid ]; do
		case $(($i % 4)) in
		0) printf " / \r";;
		1) printf " - \r";;
		2) printf " \\ \r";;
		3) printf " | \r";;
		esac
		i=$(($i + 1))
		sleep 1		
	done
	wait $spid
	case $? in
	0) printf "\033[32;1mOK\033[m\n";;
	*) printf "\033[31;1mXX\033[m\n"; exit 1;;
	esac
}

enter() {
	printf "-- Entering directory '$1' --" >$LOG
	cd "$1"
}

fetch() {
	curl -v -L "$1" -o "$2"
}

setup() {
	mkdir -p "$LOGDIR"
	touch "$LOG"
}

require() {
	for item in "$@"; do
		if ! type $item &>$LOG; then
			missing="$item $missing"
		fi
	done
	if [ -n "$missing" ]; then
		event "Missing dependancies: $missing" !
	fi
}

cc_setup() {
	require curl make tar
	cc_wipe
	event "Setting up build directory ($ROOT/$CC_PREFIX/build)" mkdir -p "$CC_PREFIX/build"
enter "$ROOT/$CC_PREFIX/build"
	event "Fetching binutils" \
		fetch "$(printf "$CC_BINUTILS_URL" "$CC_BINUTILS")" binutils.tar.gz
    	event "Extracting binutils" tar xf binutils.tar.gz
    	event "Setting up binutils build environment" mkdir -p "build-binutils"
enter "$ROOT/$CC_PREFIX/build/build-binutils"
	event "Configuring binutils " \
		../binutils-$CC_BINUTILS/configure --target=$TARGET \
		--prefix="$ROOT/$CC_PREFIX" --with-sysroot --disable-nls --disable-werror
	event "Building binutils" make
	event "Installing binutils to $CC_PREFIX" make install
enter "$ROOT/$CC_PREFIX/build"
	event "Confirming install" which $TARGET-as
	event "Fetching gcc" \
		fetch "$(printf "$CC_GCC_URL" "$CC_GCC" "$CC_GCC")" gcc.tar.gz
	event "Extracting gcc" tar xf gcc.tar.gz
	event "Setting up gcc build environment" mkdir build-gcc
enter "$ROOT/$CC_PREFIX/build/build-gcc"
	event "Configuring gcc" \
		../gcc-$CC_GCC/configure --target=$TARGET --prefix="$ROOT/$CC_PREFIX" \
		--disable-nls --enable-languages=c --without-headers
	event "Building gcc" make all-gcc
	event "Building libgcc" make all-target-libgcc
	event "Installing gcc" make install-gcc
	event "Installing libgcc" make install-target-libgcc
enter "$ROOT"
}

cc_wipe() {
	event "Wiping $CC_PREFIX" rm -rf "$ROOT/$CC_PREFIX"
}

main() {
	while [ -n "$1" ]; do
		case "$1" in
		-h|--help) get_help; exit;;
		-v|--version) get_version; exit;;
		-D|--dump) dump_settings; exit;;
		-s|--setup-cc) cc_setup; shift;;
		-w|--wipe-cc) cc_wipe; shift;;
		
		-a|--all) cc_setup; compiler; iso; exit;;
		*) event "Unknown option '$1'" ! 
		esac
	done
}

setup
main "$@"
